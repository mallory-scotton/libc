/*
** EPITECH PROJECT, 2024
** libc
** File description:
** maths
*/

#ifndef LIBMY_MATHS_H_
    #define LIBMY_MATHS_H_

///////////////////////////////////////////////////////////////////////////////
//                               --------------
//                                DEPENDENCIES
//                               --------------
///////////////////////////////////////////////////////////////////////////////
    #include "my.h"

///////////////////////////////////////////////////////////////////////////////
//                                -----------
//                                 CONSTANTS
//                                -----------
///////////////////////////////////////////////////////////////////////////////
    #define PI 3.14159265358979323846

///////////////////////////////////////////////////////////////////////////////
//                                 --------
//                                  MACROS
//                                 --------
///////////////////////////////////////////////////////////////////////////////
    #define MAX(a, b) ((a) > (b) ? (a) : (b))
    #define MIN(a, b) ((a) < (b) ? (a) : (b))
    #define LERP(a, b, t) ((a) * (1 - t) + (b) * (t))
    #define CLAMP01(x) (((x) < 0) ? 0 : (((x) > 1) ? 1 : (x)))
    #define CLAMP(x, mi, ma) ((x) < (mi) ? (mi) : ((x) > (ma) ? (ma) : (x)))
    #define ABS(x) ((x) < 0 ? -(x) : (x))
    #define FABS(x) ((x) < 0.0f ? -(x) : (x))
    #define CUBE(x) ((x) * (x) * (x))
    #define SQUARE(x) ((x) * (x))
    #define MIN3(a, b, c) MIN(MIN((a), (b)), (c))
    #define MAX3(a, b, c) MAX(MAX((a), (b)), (c))
    #define MID(x, y) (((x) - (y)) / 2)

///////////////////////////////////////////////////////////////////////////////
//                                -----------
//                                 FUNCTIONS
//                                -----------
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
/// \brief Check if the sign bit is set in the representation of a double.
///
/// \param nd           The double to check.
///
/// \return             TRUE if the sign bit is set (negative), FALSE
///                     otherwise.
///
///////////////////////////////////////////////////////////////////////////////
bool_t my_signbit(double nd);

#endif /* !LIBMY_MATHS_H_ */
